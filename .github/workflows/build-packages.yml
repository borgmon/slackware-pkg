name: Build Slackware Packages

on:
  push:
    branches:
      - main

permissions:
  contents: write # Required to push to the build branch

jobs:
  prepare:
    name: Prepare build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse config.json and create matrix
        id: set-matrix
        run: |
          # Extract enabled packages with version info from config.json
          PACKAGES=$(jq -c '[.packages[] | select(.enabled == true) | {name: .name, version: .version, build: .build}]' config.json)
          echo "matrix={\"package\":$PACKAGES}" >> $GITHUB_OUTPUT
          echo "Found packages to build:"
          echo "$PACKAGES" | jq -r '.[] | "\(.name) v\(.version)-\(.build)"'

  build:
    name: Build ${{ matrix.package.name }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Check if version already built
        id: check-existing
        run: |
          # Fetch the build branch to check for existing packages
          git fetch origin build:build 2>/dev/null || echo "Build branch does not exist yet"

          # Check if the package file already exists in the build branch
          PACKAGE_FILE="${{ matrix.package.name }}-${{ matrix.package.version }}-x86_64-${{ matrix.package.build }}.tgz"

          if git ls-tree -r build --name-only 2>/dev/null | grep -q "slackware64-current/${{ matrix.package.name }}/$PACKAGE_FILE"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "✓ Package $PACKAGE_FILE already exists in build branch - skipping build"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "→ Package $PACKAGE_FILE not found - will build"
          fi

      - name: Set up Python
        if: steps.check-existing.outputs.skip != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Rust toolchain
        if: steps.check-existing.outputs.skip != 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Build package
        if: steps.check-existing.outputs.skip != 'true'
        run: |
          python main.py --config config.json --package "${{ matrix.package.name }}" --output ./

      - name: Verify build output
        if: steps.check-existing.outputs.skip != 'true'
        run: |
          echo "Build output:"
          ls -lR slackware64-current/${{ matrix.package.name }}/

      - name: Upload package as artifact
        if: steps.check-existing.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.package.name }}
          path: slackware64-current/${{ matrix.package.name }}/
          retention-days: 1

  summary:
    name: Build Summary
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Checkout build branch
        run: |
          # Fetch build branch or create it
          git fetch origin build:build 2>/dev/null || git checkout --orphan build
          git checkout build

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: package-*

      - name: Copy packages to slackware64-current
        run: |
          echo "Copying packages from artifacts..."
          mkdir -p slackware64-current

          # Copy all packages from artifacts
          if [ -d artifacts ]; then
            for pkg_dir in artifacts/package-*; do
              if [ -d "$pkg_dir" ]; then
                pkg_name=$(basename "$pkg_dir" | sed 's/^package-//')
                echo "Copying $pkg_name..."
                mkdir -p "slackware64-current/$pkg_name"
                cp -r "$pkg_dir"/* "slackware64-current/$pkg_name/"
              fi
            done
          fi

          echo "Package directory structure:"
          ls -lR slackware64-current/

      - name: Run buildlist.sh
        run: |
          # Copy buildlist.sh to slackware64-current directory
          cp buildlist.sh slackware64-current/

          # Run buildlist.sh from within slackware64-current
          cd slackware64-current
          chmod +x buildlist.sh
          ./buildlist.sh .

      - name: Commit and push to build branch
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add all changes (FILE_LIST and CHECKSUMS.md5 are now inside slackware64-current/)
          git add slackware64-current/

          # Commit with summary
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update packages from ${{ github.sha }}"
            git push origin build
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
