name: Build Slackware Packages

on:
  push:
    branches:
      - main

permissions:
  contents: write # Required to push to the build branch

jobs:
  prepare:
    name: Prepare build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse config.json and create matrix
        id: set-matrix
        run: |
          # Extract enabled packages with version info from config.json
          PACKAGES=$(jq -c '[.packages[] | select(.enabled == true) | {name: .name, version: (.tag | sub("^v"; "")), build: .build, build_env: .build_env}]' config.json)
          echo "matrix={\"package\":$PACKAGES}" >> $GITHUB_OUTPUT
          echo "Found packages to build:"
          echo "$PACKAGES" | jq -r '.[] | "\(.name) v\(.version)-\(.build) (\(.build_env))"'

  build:
    name: Build ${{ matrix.package.name }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ needs.prepare.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Check if version already built
        id: check-existing
        run: |
          bash scripts/check_existing_package.sh "${{ matrix.package.name }}" "${{ matrix.package.version }}" "${{ matrix.package.build }}" "$GITHUB_OUTPUT"

      - name: Install uv
        if: steps.check-existing.outputs.skip != 'true'
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install Rust toolchain
        if: steps.check-existing.outputs.skip != 'true' && matrix.package.build_env == 'rust'
        uses: dtolnay/rust-toolchain@stable

      - name: Install Go toolchain
        if: steps.check-existing.outputs.skip != 'true' && matrix.package.build_env == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Build package
        if: steps.check-existing.outputs.skip != 'true'
        run: |
          uv run slackware-pkg --config config.json --package "${{ matrix.package.name }}" --output ./

      - name: Verify build output
        if: steps.check-existing.outputs.skip != 'true'
        run: |
          echo "Build output:"
          ls -lR slackware64-current/${{ matrix.package.name }}/

      - name: Upload package as artifact
        if: steps.check-existing.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.package.name }}
          path: slackware64-current/${{ matrix.package.name }}/
          retention-days: 1

  summary:
    name: Build Summary
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Checkout build branch
        run: |
          # Fetch build branch or create it
          git fetch origin build:build 2>/dev/null || git checkout --orphan build
          git checkout build

      - name: Copy scripts/ from main branch
        run: |
          git checkout main -- scripts/

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: package-*

      - name: Copy packages to slackware64-current
        run: |
          bash scripts/copy_packages_to_slackware.sh

      - name: Run buildlist.sh
        run: |
          bash scripts/run_buildlist.sh

      - name: Commit and push to build branch
        run: |
          bash scripts/commit_and_push_build.sh "${{ github.sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update and commit README.md <packages> section
        run: |
          bash scripts/update_readme_packages.sh "${{ github.sha }}" && \
          bash scripts/git_commit_and_push.sh README.md "Update README.md package list from ${{ github.sha }}"
